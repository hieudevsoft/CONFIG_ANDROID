//Appbar configuration NavController

compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

// get img from intent img

EX1:
val uri = data?.data
val inputStream = context!!.contentResolver.openInputStream(uri!!)
val bitmap = BitmapFactory.decodeStream(inputStream)
EX2:
 Uri selectedImage = data.getData();
try {
    Bitmap bitmap = MediaStore.Images.Media.getBitmap(getActivity().getContentResolver(), selectedImage);
    carImage.setImageBitmap(bitmap);
    } catch (IOException e) {
    Log.i("TAG", "Some exception " + e);
    }

//Hide soft input
val inputMethod = getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager
iputMethod.hideSoftInputFromWindow((component attach input).windowToken,0)

//Scale automatic drawerlayout
drawerlayout.addDrawerListener(object: DrawerLayout.SimpleDrawerListener() {
            override fun onDrawerSlide(drawerView: View, slideOffset: Float) {
                var diffScaledOffset = slideOffset * (1 - 0.8);
                var offsetScale = 1 - diffScaledOffset;
                contentView.scaleX = offsetScale.toFloat();
                contentView.scaleY = offsetScale.toFloat();

                // Translate the View, accounting for the scaled width
                var xOffset = drawerView.getWidth() * slideOffset;
                var xOffsetDiff = contentView.width * diffScaledOffset / 2;
                var  xTranslation = xOffset - xOffsetDiff;
                contentView.translationX = xTranslation.toFloat();
            }
        })

//flag and code phone country
implementation 'com.hbb20:ccp:2.3.1'

//OTP Pin View
implementation 'com.chaos.view:pinview:1.4.3'

// congif rotate not reset app
android:configChanges="keyboardHidden|orientation|screenSize"

//GridItemDecoration
class GridItemDecoration(gridSpacingPx: Int, gridSize: Int) : RecyclerView.ItemDecoration() {
    private var mSizeGridSpacingPx: Int = gridSpacingPx
    private var mGridSize: Int = gridSize

    private var mNeedLeftSpacing = false

    override fun getItemOffsets(outRect: Rect, view: View, parent: RecyclerView, state: RecyclerView.State) {
        val frameWidth = ((parent.width - mSizeGridSpacingPx.toFloat() * (mGridSize - 1)) / mGridSize).toInt()
        val padding = parent.width / mGridSize - frameWidth
        val itemPosition = (view.getLayoutParams() as RecyclerView.LayoutParams).viewAdapterPosition
        if (itemPosition < mGridSize) {
            outRect.top = 0
        } else {
            outRect.top = mSizeGridSpacingPx
        }
        if (itemPosition % mGridSize == 0) {
            outRect.left = 0
            outRect.right = padding
            mNeedLeftSpacing = true
        } else if ((itemPosition + 1) % mGridSize == 0) {
            mNeedLeftSpacing = false
            outRect.right = 0
            outRect.left = padding
        } else if (mNeedLeftSpacing) {
            mNeedLeftSpacing = false
            outRect.left = mSizeGridSpacingPx - padding
            if ((itemPosition + 2) % mGridSize == 0) {
                outRect.right = mSizeGridSpacingPx - padding
            } else {
                outRect.right = mSizeGridSpacingPx / 2
            }
        } else if ((itemPosition + 2) % mGridSize == 0) {
            mNeedLeftSpacing = false
            outRect.left = mSizeGridSpacingPx / 2
            outRect.right = mSizeGridSpacingPx - padding
        } else {
            mNeedLeftSpacing = false
            outRect.left = mSizeGridSpacingPx / 2
            outRect.right = mSizeGridSpacingPx / 2
        }
        outRect.bottom = 0
    }
}
